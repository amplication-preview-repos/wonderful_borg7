/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Institutions } from "./Institutions";
import { InstitutionsCountArgs } from "./InstitutionsCountArgs";
import { InstitutionsFindManyArgs } from "./InstitutionsFindManyArgs";
import { InstitutionsFindUniqueArgs } from "./InstitutionsFindUniqueArgs";
import { DeleteInstitutionsArgs } from "./DeleteInstitutionsArgs";
import { InstitutionsService } from "../institutions.service";
@graphql.Resolver(() => Institutions)
export class InstitutionsResolverBase {
  constructor(protected readonly service: InstitutionsService) {}

  async _institutionsItemsMeta(
    @graphql.Args() args: InstitutionsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Institutions])
  async institutionsItems(
    @graphql.Args() args: InstitutionsFindManyArgs
  ): Promise<Institutions[]> {
    return this.service.institutionsItems(args);
  }

  @graphql.Query(() => Institutions, { nullable: true })
  async institutions(
    @graphql.Args() args: InstitutionsFindUniqueArgs
  ): Promise<Institutions | null> {
    const result = await this.service.institutions(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Institutions)
  async deleteInstitutions(
    @graphql.Args() args: DeleteInstitutionsArgs
  ): Promise<Institutions | null> {
    try {
      return await this.service.deleteInstitutions(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
