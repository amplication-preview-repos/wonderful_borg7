/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Institutions as PrismaInstitutions } from "@prisma/client";

export class InstitutionsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InstitutionsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.institutions.count(args);
  }

  async institutionsItems(
    args: Prisma.InstitutionsFindManyArgs
  ): Promise<PrismaInstitutions[]> {
    return this.prisma.institutions.findMany(args);
  }
  async institutions(
    args: Prisma.InstitutionsFindUniqueArgs
  ): Promise<PrismaInstitutions | null> {
    return this.prisma.institutions.findUnique(args);
  }
  async createInstitutions(
    args: Prisma.InstitutionsCreateArgs
  ): Promise<PrismaInstitutions> {
    return this.prisma.institutions.create(args);
  }
  async updateInstitutions(
    args: Prisma.InstitutionsUpdateArgs
  ): Promise<PrismaInstitutions> {
    return this.prisma.institutions.update(args);
  }
  async deleteInstitutions(
    args: Prisma.InstitutionsDeleteArgs
  ): Promise<PrismaInstitutions> {
    return this.prisma.institutions.delete(args);
  }
}
