/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FreelancerServices as PrismaFreelancerServices,
} from "@prisma/client";

export class FreelancerServicesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FreelancerServicesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.freelancerServices.count(args);
  }

  async freelancerServicesItems(
    args: Prisma.FreelancerServicesFindManyArgs
  ): Promise<PrismaFreelancerServices[]> {
    return this.prisma.freelancerServices.findMany(args);
  }
  async freelancerServices(
    args: Prisma.FreelancerServicesFindUniqueArgs
  ): Promise<PrismaFreelancerServices | null> {
    return this.prisma.freelancerServices.findUnique(args);
  }
  async createFreelancerServices(
    args: Prisma.FreelancerServicesCreateArgs
  ): Promise<PrismaFreelancerServices> {
    return this.prisma.freelancerServices.create(args);
  }
  async updateFreelancerServices(
    args: Prisma.FreelancerServicesUpdateArgs
  ): Promise<PrismaFreelancerServices> {
    return this.prisma.freelancerServices.update(args);
  }
  async deleteFreelancerServices(
    args: Prisma.FreelancerServicesDeleteArgs
  ): Promise<PrismaFreelancerServices> {
    return this.prisma.freelancerServices.delete(args);
  }
}
