/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FreelancerServicesService } from "../freelancerServices.service";
import { FreelancerServicesCreateInput } from "./FreelancerServicesCreateInput";
import { FreelancerServices } from "./FreelancerServices";
import { FreelancerServicesFindManyArgs } from "./FreelancerServicesFindManyArgs";
import { FreelancerServicesWhereUniqueInput } from "./FreelancerServicesWhereUniqueInput";
import { FreelancerServicesUpdateInput } from "./FreelancerServicesUpdateInput";

export class FreelancerServicesControllerBase {
  constructor(protected readonly service: FreelancerServicesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FreelancerServices })
  async createFreelancerServices(
    @common.Body() data: FreelancerServicesCreateInput
  ): Promise<FreelancerServices> {
    return await this.service.createFreelancerServices({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FreelancerServices] })
  @ApiNestedQuery(FreelancerServicesFindManyArgs)
  async freelancerServicesItems(
    @common.Req() request: Request
  ): Promise<FreelancerServices[]> {
    const args = plainToClass(FreelancerServicesFindManyArgs, request.query);
    return this.service.freelancerServicesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FreelancerServices })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async freelancerServices(
    @common.Param() params: FreelancerServicesWhereUniqueInput
  ): Promise<FreelancerServices | null> {
    const result = await this.service.freelancerServices({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FreelancerServices })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFreelancerServices(
    @common.Param() params: FreelancerServicesWhereUniqueInput,
    @common.Body() data: FreelancerServicesUpdateInput
  ): Promise<FreelancerServices | null> {
    try {
      return await this.service.updateFreelancerServices({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FreelancerServices })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFreelancerServices(
    @common.Param() params: FreelancerServicesWhereUniqueInput
  ): Promise<FreelancerServices | null> {
    try {
      return await this.service.deleteFreelancerServices({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
