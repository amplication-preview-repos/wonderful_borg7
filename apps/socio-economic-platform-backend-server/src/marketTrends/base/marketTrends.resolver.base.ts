/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MarketTrends } from "./MarketTrends";
import { MarketTrendsCountArgs } from "./MarketTrendsCountArgs";
import { MarketTrendsFindManyArgs } from "./MarketTrendsFindManyArgs";
import { MarketTrendsFindUniqueArgs } from "./MarketTrendsFindUniqueArgs";
import { DeleteMarketTrendsArgs } from "./DeleteMarketTrendsArgs";
import { MarketTrendsService } from "../marketTrends.service";
@graphql.Resolver(() => MarketTrends)
export class MarketTrendsResolverBase {
  constructor(protected readonly service: MarketTrendsService) {}

  async _marketTrendsItemsMeta(
    @graphql.Args() args: MarketTrendsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MarketTrends])
  async marketTrendsItems(
    @graphql.Args() args: MarketTrendsFindManyArgs
  ): Promise<MarketTrends[]> {
    return this.service.marketTrendsItems(args);
  }

  @graphql.Query(() => MarketTrends, { nullable: true })
  async marketTrends(
    @graphql.Args() args: MarketTrendsFindUniqueArgs
  ): Promise<MarketTrends | null> {
    const result = await this.service.marketTrends(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MarketTrends)
  async deleteMarketTrends(
    @graphql.Args() args: DeleteMarketTrendsArgs
  ): Promise<MarketTrends | null> {
    try {
      return await this.service.deleteMarketTrends(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
