/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Ratings } from "./Ratings";
import { RatingsCountArgs } from "./RatingsCountArgs";
import { RatingsFindManyArgs } from "./RatingsFindManyArgs";
import { RatingsFindUniqueArgs } from "./RatingsFindUniqueArgs";
import { DeleteRatingsArgs } from "./DeleteRatingsArgs";
import { RatingsService } from "../ratings.service";
@graphql.Resolver(() => Ratings)
export class RatingsResolverBase {
  constructor(protected readonly service: RatingsService) {}

  async _ratingsItemsMeta(
    @graphql.Args() args: RatingsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Ratings])
  async ratingsItems(
    @graphql.Args() args: RatingsFindManyArgs
  ): Promise<Ratings[]> {
    return this.service.ratingsItems(args);
  }

  @graphql.Query(() => Ratings, { nullable: true })
  async ratings(
    @graphql.Args() args: RatingsFindUniqueArgs
  ): Promise<Ratings | null> {
    const result = await this.service.ratings(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Ratings)
  async deleteRatings(
    @graphql.Args() args: DeleteRatingsArgs
  ): Promise<Ratings | null> {
    try {
      return await this.service.deleteRatings(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
