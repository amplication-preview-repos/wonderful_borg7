/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RatingsService } from "../ratings.service";
import { RatingsCreateInput } from "./RatingsCreateInput";
import { Ratings } from "./Ratings";
import { RatingsFindManyArgs } from "./RatingsFindManyArgs";
import { RatingsWhereUniqueInput } from "./RatingsWhereUniqueInput";
import { RatingsUpdateInput } from "./RatingsUpdateInput";

export class RatingsControllerBase {
  constructor(protected readonly service: RatingsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ratings })
  async createRatings(
    @common.Body() data: RatingsCreateInput
  ): Promise<Ratings> {
    return await this.service.createRatings({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Ratings] })
  @ApiNestedQuery(RatingsFindManyArgs)
  async ratingsItems(@common.Req() request: Request): Promise<Ratings[]> {
    const args = plainToClass(RatingsFindManyArgs, request.query);
    return this.service.ratingsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ratings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ratings(
    @common.Param() params: RatingsWhereUniqueInput
  ): Promise<Ratings | null> {
    const result = await this.service.ratings({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ratings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRatings(
    @common.Param() params: RatingsWhereUniqueInput,
    @common.Body() data: RatingsUpdateInput
  ): Promise<Ratings | null> {
    try {
      return await this.service.updateRatings({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ratings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRatings(
    @common.Param() params: RatingsWhereUniqueInput
  ): Promise<Ratings | null> {
    try {
      return await this.service.deleteRatings({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
