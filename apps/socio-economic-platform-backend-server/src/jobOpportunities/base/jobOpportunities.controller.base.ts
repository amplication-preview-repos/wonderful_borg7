/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { JobOpportunitiesService } from "../jobOpportunities.service";
import { JobOpportunitiesCreateInput } from "./JobOpportunitiesCreateInput";
import { JobOpportunities } from "./JobOpportunities";
import { JobOpportunitiesFindManyArgs } from "./JobOpportunitiesFindManyArgs";
import { JobOpportunitiesWhereUniqueInput } from "./JobOpportunitiesWhereUniqueInput";
import { JobOpportunitiesUpdateInput } from "./JobOpportunitiesUpdateInput";

export class JobOpportunitiesControllerBase {
  constructor(protected readonly service: JobOpportunitiesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: JobOpportunities })
  async createJobOpportunities(
    @common.Body() data: JobOpportunitiesCreateInput
  ): Promise<JobOpportunities> {
    return await this.service.createJobOpportunities({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [JobOpportunities] })
  @ApiNestedQuery(JobOpportunitiesFindManyArgs)
  async jobOpportunitiesItems(
    @common.Req() request: Request
  ): Promise<JobOpportunities[]> {
    const args = plainToClass(JobOpportunitiesFindManyArgs, request.query);
    return this.service.jobOpportunitiesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: JobOpportunities })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async jobOpportunities(
    @common.Param() params: JobOpportunitiesWhereUniqueInput
  ): Promise<JobOpportunities | null> {
    const result = await this.service.jobOpportunities({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: JobOpportunities })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateJobOpportunities(
    @common.Param() params: JobOpportunitiesWhereUniqueInput,
    @common.Body() data: JobOpportunitiesUpdateInput
  ): Promise<JobOpportunities | null> {
    try {
      return await this.service.updateJobOpportunities({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: JobOpportunities })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteJobOpportunities(
    @common.Param() params: JobOpportunitiesWhereUniqueInput
  ): Promise<JobOpportunities | null> {
    try {
      return await this.service.deleteJobOpportunities({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
