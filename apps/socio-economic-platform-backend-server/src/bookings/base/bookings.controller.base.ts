/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BookingsService } from "../bookings.service";
import { BookingsCreateInput } from "./BookingsCreateInput";
import { Bookings } from "./Bookings";
import { BookingsFindManyArgs } from "./BookingsFindManyArgs";
import { BookingsWhereUniqueInput } from "./BookingsWhereUniqueInput";
import { BookingsUpdateInput } from "./BookingsUpdateInput";

export class BookingsControllerBase {
  constructor(protected readonly service: BookingsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bookings })
  async createBookings(
    @common.Body() data: BookingsCreateInput
  ): Promise<Bookings> {
    return await this.service.createBookings({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Bookings] })
  @ApiNestedQuery(BookingsFindManyArgs)
  async bookingsItems(@common.Req() request: Request): Promise<Bookings[]> {
    const args = plainToClass(BookingsFindManyArgs, request.query);
    return this.service.bookingsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bookings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bookings(
    @common.Param() params: BookingsWhereUniqueInput
  ): Promise<Bookings | null> {
    const result = await this.service.bookings({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bookings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBookings(
    @common.Param() params: BookingsWhereUniqueInput,
    @common.Body() data: BookingsUpdateInput
  ): Promise<Bookings | null> {
    try {
      return await this.service.updateBookings({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bookings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBookings(
    @common.Param() params: BookingsWhereUniqueInput
  ): Promise<Bookings | null> {
    try {
      return await this.service.deleteBookings({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
