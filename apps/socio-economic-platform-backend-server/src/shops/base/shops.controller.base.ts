/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShopsService } from "../shops.service";
import { ShopsCreateInput } from "./ShopsCreateInput";
import { Shops } from "./Shops";
import { ShopsFindManyArgs } from "./ShopsFindManyArgs";
import { ShopsWhereUniqueInput } from "./ShopsWhereUniqueInput";
import { ShopsUpdateInput } from "./ShopsUpdateInput";

export class ShopsControllerBase {
  constructor(protected readonly service: ShopsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Shops })
  async createShops(@common.Body() data: ShopsCreateInput): Promise<Shops> {
    return await this.service.createShops({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Shops] })
  @ApiNestedQuery(ShopsFindManyArgs)
  async shopsItems(@common.Req() request: Request): Promise<Shops[]> {
    const args = plainToClass(ShopsFindManyArgs, request.query);
    return this.service.shopsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Shops })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async shops(
    @common.Param() params: ShopsWhereUniqueInput
  ): Promise<Shops | null> {
    const result = await this.service.shops({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Shops })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShops(
    @common.Param() params: ShopsWhereUniqueInput,
    @common.Body() data: ShopsUpdateInput
  ): Promise<Shops | null> {
    try {
      return await this.service.updateShops({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Shops })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShops(
    @common.Param() params: ShopsWhereUniqueInput
  ): Promise<Shops | null> {
    try {
      return await this.service.deleteShops({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
