/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GoodsService } from "../goods.service";
import { GoodsCreateInput } from "./GoodsCreateInput";
import { Goods } from "./Goods";
import { GoodsFindManyArgs } from "./GoodsFindManyArgs";
import { GoodsWhereUniqueInput } from "./GoodsWhereUniqueInput";
import { GoodsUpdateInput } from "./GoodsUpdateInput";

export class GoodsControllerBase {
  constructor(protected readonly service: GoodsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Goods })
  async createGoods(@common.Body() data: GoodsCreateInput): Promise<Goods> {
    return await this.service.createGoods({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Goods] })
  @ApiNestedQuery(GoodsFindManyArgs)
  async goodsItems(@common.Req() request: Request): Promise<Goods[]> {
    const args = plainToClass(GoodsFindManyArgs, request.query);
    return this.service.goodsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Goods })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async goods(
    @common.Param() params: GoodsWhereUniqueInput
  ): Promise<Goods | null> {
    const result = await this.service.goods({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Goods })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGoods(
    @common.Param() params: GoodsWhereUniqueInput,
    @common.Body() data: GoodsUpdateInput
  ): Promise<Goods | null> {
    try {
      return await this.service.updateGoods({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Goods })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGoods(
    @common.Param() params: GoodsWhereUniqueInput
  ): Promise<Goods | null> {
    try {
      return await this.service.deleteGoods({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
